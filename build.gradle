plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.github'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.4.1'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test Lombok
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // swagger
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE' // 호환되는 버전으로 업데이트

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // test
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JWT
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    runtimeOnly 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


}

tasks.named('test') {
    useJUnitPlatform()
}
// EC2 접속을위해선 mainClass를 정의해줘야한다.
tasks.named('bootJar'){
    mainClass = 'com.github.supercoding.SuperCodingApplication'
}
//tasks.withType(JavaCompile) {
//    options.annotationProcessorPath = configurations.annotationProcessor
//}
